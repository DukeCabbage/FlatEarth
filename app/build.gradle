apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-android-extensions"
apply plugin: "project-report"

android {
    compileSdkVersion androidCompileSdkVersion.toInteger()
    buildToolsVersion androidBuildToolsVersion

    def versionProps = getVersionProps()
    def debugVersionNameSuffix = getAppVersionNameDebugSuffix(versionProps)

    defaultConfig {
        applicationId "com.cabbage.flatearth"

        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion

        versionCode getAppVersionCode(versionProps)
        versionName getAppVersionName(versionProps)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    File propsFile = rootProject.file("keystore.properties")
    boolean localKeyStore = propsFile.exists()
    if (localKeyStore) {
        println 'Using local key store'

        Properties properties = new Properties()
        properties.load(propsFile.newDataInputStream())

        def keyPath = System.getenv("ANDROID_KEYSTORE_PATH")
        signingConfigs {
            debug {
                storeFile = file(keyPath + properties.getProperty("debugStoreFile"))
                storePassword = properties.getProperty("debugStorePassword")
                keyAlias = properties.getProperty("debugKeyAlias")
                keyPassword = properties.getProperty("debugKeyPassword")
            }

            release {
                storeFile = file(keyPath + properties.getProperty("releaseStoreFile"))
                storePassword = properties.getProperty("releaseStorePassword")
                keyAlias = properties.getProperty("releaseKeyAlias")
                keyPassword = properties.getProperty("releaseKeyPassword")

            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            versionNameSuffix debugVersionNameSuffix

            if (localKeyStore) signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (localKeyStore) signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation kotl.jdk8

    implementation google.material

    // ReactiveX
    implementation rx.java
    implementation rx.android
    implementation rx.kotlin

    implementation rx.permission
    implementation rx.binding
    implementation rx.preferences

    // Dagger 2
    implementation dagger.lib
    kapt dagger.compiler

    // Butter Knife
    implementation butterknife.lib
    kapt butterknife.compiler

    // Timber
    implementation timber

//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
}
